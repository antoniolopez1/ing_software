###################TRIGGER FUNCTION-INSERT########################
CREATE OR REPLACE FUNCTION accumulated_hour()
  RETURNS trigger AS
$BODY$
begin

UPDATE salaries SET total_hours = total_hours + new.total_hours, total_extra_hours = total_extra_hours + new.extra_hours, accumulated=(charge_for_hours*(total_hours + new.total_hours))+((total_extra_hours+new.extra_hours)*20000)
WHERE employee_id=new.employee_id;
return new;
end
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.accumulated_hours()
  OWNER TO postgres;
###################TRIGGER- INSERT#############
CREATE TRIGGER ai_hour
  AFTER INSERT
  ON public.hours_histories
  FOR EACH ROW
  EXECUTE PROCEDURE public.accumulated_hour();
###################TRIGGER FUNCTION-UPDATE########################
CREATE OR REPLACE FUNCTION public.accumulated_hours()
  RETURNS trigger AS
$BODY$begin
if new <> old THEN
UPDATE salaries
SET total_hours = total_hours + new.total_hours - old.total_hours, total_extra_hours = total_extra_hours + new.extra_hours - old.extra_hours,
accumulated=(charge_for_hours*(total_hours + new.total_hours - old.total_hours))+((total_extra_hours+ new.extra_hours - old.extra_hours)*20000)
WHERE employee_id=new.employee_id;
end if;
return new;
end
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.accumulated_hours()
  OWNER TO postgres;
###################TRIGGER- UPDATE#############
CREATE TRIGGER bi_hours
  BEFORE UPDATE
  ON public.hours_histories
  FOR EACH ROW
  EXECUTE PROCEDURE public.accumulated_hours();
###################TRIGGERS FUNCTION-INSERT de balance y accumulated############
CREATE OR REPLACE FUNCTION public.balance_employee_payments()
  RETURNS trigger AS
$BODY$begin

UPDATE salaries SET accumulated = new.balance, total_extra_hours = 0, total_hours=new.balance/charge_for_hours
WHERE id=new.salary_id;
return new;
end
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.balance_employee_payments()
  OWNER TO postgres;
#######################TRIGGER INSERT balance ############
CREATE TRIGGER ai_balance
  AFTER INSERT
  ON public.employee_payments
  FOR EACH ROW
  EXECUTE PROCEDURE public.balance_employee_payments();
#######################TRIGGER FUNCTION update balance#########################

CREATE OR REPLACE FUNCTION public.balance_accumulated()
  RETURNS trigger AS
$BODY$begin
if new <> old THEN
UPDATE salaries SET accumulated = (old.amount+old.balance)-new.amount, 
total_extra_hours = 0, 
total_hours=((old.amount+old.balance)-new.amount)/charge_for_hours
WHERE id=new.salary_id;

end if;
return new;
end
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.balance_accumulated()
  OWNER TO postgres;
#######################TRIGGER before update balance###################
CREATE TRIGGER bu_balance
  BEFORE UPDATE
  ON public.employee_payments
  FOR EACH ROW
  EXECUTE PROCEDURE public.balance_accumulated();
#######################TRIGGER Function purchase_total_i###########
CREATE OR REPLACE FUNCTION public.purchase_total()
  RETURNS trigger AS
$BODY$begin
UPDATE purchases SET total=total+new.subtotal, balance=(total+new.subtotal)-amount
WHERE id=new.purchase_id;
return new;
end$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.purchase_total()
  OWNER TO postgres;
#######################TRIGGER ai_purchase_detail#######################
CREATE TRIGGER ai_purchase_detail
  AFTER INSERT
  ON public.purchase_details
  FOR EACH ROW
  EXECUTE PROCEDURE public.purchase_total();
#######################TRIGGER Function purchase_total_u###################
CREATE OR REPLACE FUNCTION public.purchase_total_u()
  RETURNS trigger AS
$BODY$begin
if new <> old THEN
UPDATE purchases SET total = (total-old.subtotal)+new.subtotal, 
balance = ((total-old.subtotal)+new.subtotal)-amount

WHERE id=new.purchase_id;
end if;
return new;
end$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.purchase_total_u()
  OWNER TO postgres;
##########################TRIGGER bu_purchase_detail########################
CREATE TRIGGER bu_purchase_detail
  BEFORE UPDATE
  ON public.purchase_details
  FOR EACH ROW
  EXECUTE PROCEDURE public.purchase_total_u();
###########################TRIGGER Function material quantity###############
CREATE OR REPLACE FUNCTION public.material_quantity_i()
  RETURNS trigger AS
$BODY$begin
UPDATE materials SET quantity=quantity+new.quantity, cost=((new.net_price*new.iva)/100)+new.net_price
WHERE id=new.material_id;
return new;
end$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.material_quantity_i()
  OWNER TO postgres;
#############################TRIGGER ai_purchase_detail in materials#################
CREATE TRIGGER ai_purchase_detail_material
  AFTER INSERT
  ON public.purchase_details
  FOR EACH ROW
  EXECUTE PROCEDURE public.material_quantity_i();

#############################TRIGGER Function material_quantity_u#####################
CREATE OR REPLACE FUNCTION public.material_quantity_u()
  RETURNS trigger AS
$BODY$begin
if new <> old THEN
UPDATE materials SET quantity=(quantity-old.quantity)+new.quantity, cost=((new.net_price*new.iva)/100)+new.net_price
WHERE id=new.material_id;

end if;
return new;
end$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.material_quantity_u()
  OWNER TO postgres;
###############################TRIGGER bu_purchase_detail in materials######
CREATE TRIGGER bu_purchase_detail_material
  BEFORE UPDATE
  ON public.purchase_details
  FOR EACH ROW
  EXECUTE PROCEDURE public.material_quantity_u();
###############################Trigger Function utilities_details_i#####
CREATE OR REPLACE FUNCTION public.utilities_details_i()
  RETURNS trigger AS
$BODY$begin

insert into utilities (utilities_type_id, quantity, width, high, thickness, cost, observation, created_at, updated_at)
 values (new.utilities_type_id, new.quantity, new.width, new.high, new.thickness, new.cost, new.observation, new.created_at, new.updated_at);

return new;
end$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.utilities_details_i()
  OWNER TO postgres;
################Trigger i_utility###########
CREATE TRIGGER i_utility
  AFTER INSERT
  ON public.u_purchase_details
  FOR EACH ROW
  EXECUTE PROCEDURE public.utilities_details_i();
###############Trigger function utilities_details_u####
CREATE OR REPLACE FUNCTION public.utilities_details_u()
  RETURNS trigger AS
$BODY$begin
if new <> old THEN
UPDATE utilities SET utilities_type_id=new.utilities_type_id, quantity=new.quantity, width=new.width, high=new.high, thickness=new.thickness, cost=new.cost, observation=new.observation, updated_at=new.updated_at
WHERE created_at=old.created_at;
end if;
return new;
end$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.utilities_details_u()
  OWNER TO postgres;
####################Trigger u_utility###############
CREATE TRIGGER u_utility
  BEFORE UPDATE
  ON public.u_purchase_details
  FOR EACH ROW
  EXECUTE PROCEDURE public.utilities_details_u();
#####################Trigger function purchase_utilities_i#######
CREATE OR REPLACE FUNCTION public.purchase_utilities_i()
  RETURNS trigger AS
$BODY$begin
UPDATE purchases SET total=total+new.subtotal, balance=(total+new.subtotal)-amount
WHERE id=new.purchase_id;
return new;
end$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.purchase_utilities_i()
  OWNER TO postgres;
#######################Trigger i_utility_total###################

CREATE TRIGGER i_utility_total
  AFTER INSERT
  ON public.u_purchase_details
  FOR EACH ROW
  EXECUTE PROCEDURE public.purchase_utilities_i();
#######################Trigger function purchase_utilities_u#######
CREATE OR REPLACE FUNCTION public.purchase_utilities_u()
  RETURNS trigger AS
$BODY$begin
if new <> old THEN
UPDATE purchases SET total = (total-old.subtotal)+new.subtotal, 
balance = ((total-old.subtotal)+new.subtotal)-amount

WHERE id=new.purchase_id;
end if;
return new;
end$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.purchase_utilities_u()
  OWNER TO postgres;
###################Trigger u_utility_total##################

CREATE TRIGGER u_utility_total
  BEFORE UPDATE
  ON public.u_purchase_details
  FOR EACH ROW
  EXECUTE PROCEDURE public.purchase_utilities_u();

##################Trigger function furniture_cost_i##################
CREATE OR REPLACE FUNCTION public.furniture_cost_i()
  RETURNS trigger AS
$BODY$begin
UPDATE furnitures SET cost=cost+new.subtotal, price=profit+(cost+new.subtotal)+(((profit+(cost+new.subtotal))*iva)/100)
WHERE id=new.furniture_id;
return new;
end$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.furniture_cost_i()
  OWNER TO postgres;
#######################Trigger i_cost_furniture#########
CREATE TRIGGER i_cost_furniture
  AFTER INSERT
  ON public.material_for_furnitures
  FOR EACH ROW
  EXECUTE PROCEDURE public.furniture_cost_i();
#######################Trigger function u_furniture_cost#######
CREATE OR REPLACE FUNCTION public.u_furniture_cost()
  RETURNS trigger AS
$BODY$begin
if new <> old THEN
UPDATE furnitures SET cost = (cost-old.subtotal)+new.subtotal, 
price = profit+((cost-old.subtotal)+new.subtotal)+(((profit+((cost-old.subtotal)+new.subtotal))*iva)/100)

WHERE id=new.furniture_id;
end if;
return new;
end
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.u_furniture_cost()
  OWNER TO postgres;
#######################Trigger u_cost_furniture#############
CREATE TRIGGER u_cost_furniture
  BEFORE UPDATE
  ON public.material_for_furnitures
  FOR EACH ROW
  EXECUTE PROCEDURE public.u_furniture_cost();
#######################Trigger function budget_total_i######
CREATE OR REPLACE FUNCTION public.budget_total_i()
  RETURNS trigger AS
$BODY$begin
UPDATE budget_for_orders SET total=total+new.subtotal
WHERE id=new.budget_for_order_id;
return new;
end$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.budget_total_i()
  OWNER TO postgres;
####################Trigger i_budget_total#######
CREATE TRIGGER i_budget_total
  AFTER INSERT
  ON public.budgets
  FOR EACH ROW
  EXECUTE PROCEDURE public.budget_total_i();
##################### Trigger function budget_total_u##########
CREATE OR REPLACE FUNCTION public.budget_total_u()
  RETURNS trigger AS
$BODY$begin
if new <> old THEN
UPDATE budget_for_orders SET total = (total-old.subtotal)+new.subtotal

WHERE id=new.budget_for_order_id;
end if;
return new;
end$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.budget_total_u()
  OWNER TO postgres;
####################Trigger u_budget_total###############
CREATE TRIGGER u_budget_total
  BEFORE UPDATE
  ON public.budgets
  FOR EACH ROW
  EXECUTE PROCEDURE public.budget_total_u();
###################Trigger function sale_charge_i #########
CREATE OR REPLACE FUNCTION public.sale_charge_i()
  RETURNS trigger AS
$BODY$begin
UPDATE sales SET balance=new.balance, amount=amount+new.amount
WHERE id=new.sale_id;
return new;
end$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.sale_charge_i()
  OWNER TO postgres;
#######################Trigger i_balance_sale###############
CREATE TRIGGER i_balance_sale
  AFTER INSERT
  ON public.sales_charges
  FOR EACH ROW
  EXECUTE PROCEDURE public.sale_charge_i();
###################Trigger function sale_charge_u #############
CREATE OR REPLACE FUNCTION public.sale_charge_u()
  RETURNS trigger AS
$BODY$begin
if new <> old THEN
UPDATE sales SET balance = (old.amount+old.balance)-new.amount,
amount=(old.amount+old.balance)-new.amount
WHERE id=new.sale_id;
new.balance=(old.amount+old.balance)-new.amount;
end if;
return new;
end$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.sale_charge_u()
  OWNER TO postgres;
#####################trigger u_balance_sale#############
CREATE TRIGGER u_balance_sale
  BEFORE UPDATE
  ON public.sales_charges
  FOR EACH ROW
  EXECUTE PROCEDURE public.sale_charge_u();
######################Trigger i_furniture_util_cost##########
CREATE TRIGGER i_furniture_util_cost
  AFTER INSERT
  ON public.utilities_for_furnitures
  FOR EACH ROW
  EXECUTE PROCEDURE public.furniture_cost_i();
######################Trigger u_furniture_util_cost##########
CREATE TRIGGER u_furniture_util_cost
  BEFORE UPDATE
  ON public.utilities_for_furnitures
  FOR EACH ROW
  EXECUTE PROCEDURE public.u_furniture_cost();



